random_numbers(random_num, numbers_requested - 1)
}
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
# Write a program to generate N-pairs (ui, vi), 1 ≤ i ≤ N uniformly distributed in the range [0,1)
number_list = list()
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
append(number_list, random_num)
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
}
random_numbers(seed, num_numbers)
View(number_list)
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
number_list[numbers_requested] = random_num
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
number_list[numbers_requested] = random_num
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
return(number_list)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
#number_list[numbers_requested] = random_num
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
return(random_num)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
number_list = NA
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
number_list[numbers_requested] = random_num
return(number_list)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
number_list[numbers_requested] = random_num
return(number_list)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
number_list = NA
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
print(paste(random_num, numbers_requested))
number_list[numbers_requested] = random_num
return(number_list)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
number_list = NA
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
print(paste(random_num, numbers_requested, number_list))
number_list[numbers_requested] = random_num
print(number_list)
return(number_list)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
number_list = NA
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
#print(paste(random_num, numbers_requested, number_list))
number_list[numbers_requested] = random_num
#print(number_list)
return(number_list)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
?return
myoutput = capture.output(random_numbers(seed, num_numbers))
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
print(random_num)
#print(paste(random_num, numbers_requested, number_list))
#number_list[numbers_requested] = random_num
#print(number_list)
#return(number_list)
}
myoutput = capture.output(random_numbers(seed, num_numbers))
myoutput
?capture.output
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
cat(random_num)
#print(paste(random_num, numbers_requested, number_list))
#number_list[numbers_requested] = random_num
#print(number_list)
#return(number_list)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
cat(paste0(random_num,"\n"))
#print(paste(random_num, numbers_requested, number_list))
#number_list[numbers_requested] = random_num
#print(number_list)
#return(number_list)
}
seed = 202
num_numbers = 5
random_numbers(seed, num_numbers)
myoutput = capture.output(random_numbers(seed, num_numbers))
as.numeric(myoutput)
myoutput = as.numeric(capture.output(random_numbers(seed, num_numbers)))
mynumbers = as.numeric(capture.output(random_numbers(seed, num_numbers)))
seed = 203
num_numbers = 5
mynumbers = as.numeric(capture.output(random_numbers(seed, num_numbers)))
num_numbers = 4
mynumbers = as.numeric(capture.output(random_numbers(seed, num_numbers)))
seed = 203
num_numbers = 4
mynumbers = as.numeric(capture.output(random_numbers(seed, num_numbers)))
seed = 203
num_numbers = 5
mynumbers = as.numeric(capture.output(random_numbers(seed, num_numbers)))
random_numbers = function (seed, numbers_requested) {
random_num = (77*seed + 8779541) %% 791
if (numbers_requested > 1) {
random_numbers(random_num, numbers_requested - 1)
}
return(cat(paste0(random_num,"\n")))
}
seed = 203
num_numbers = 5
mynumbers = as.numeric(capture.output(random_numbers(seed, num_numbers)))
random_0_to_1_nums = function(random_nums) {
new_numbers = (random_nums / 791)
return(new_numbers)
}
random_0_to_1_nums(mynumbers)
random_0_to_1_nums = function(seed, numbers_requested) {
mynumbers = as.numeric(capture.output(random_numbers(seed, num_numbers)))
new_numbers = (mynumbers / 791)
return(new_numbers)
}
random_0_to_1_nums(mynumbers)
random_0_to_1_nums = function(seed = 200, numbers_requested = 10) {
mynumbers = as.numeric(capture.output(random_numbers(seed, num_numbers)))
new_numbers = (mynumbers / 791)
return(new_numbers)
}
random_0_to_1_nums(mynumbers)
random_0_to_1_nums()
random_0_to_1_nums(numbers_requested = 1)
random_0_to_1_nums = function(seed = 200, numbers_requested = 10) {
mynumbers = as.numeric(capture.output(random_numbers(seed, numbers_requested)))
new_numbers = (mynumbers / 791)
return(new_numbers)
}
random_0_to_1_nums(numbers_requested = 1)
probability_n_j = function(n, j) {
probability = choose(n,j)*(1/n)^(j)*(1-(1/n))^(n-j)
return(probability)
}
election = function(n) {
if (n > 2) {
for (j in 2:n-1) {
recursive_sum = sum(election(j)*probability_n_j(n,j))
}
}
final_sum = (1 + recursive_sum) / (1 - probability_n_j(n,0) - probability_n_j(n,n))
return(final_sum)
}
j in n-1:2
seq(3-1:2)
seq(10-1:2)
seq((10-1):2)
?seq
seq(from = (10-1), to = 2)
election = function(n) {
if (n <= 2) {
for (j in seq(from = (n-1), to = 2)) {
recursive_sum = sum(election(j)*probability_n_j(n,j))
}
}
final_sum = (1 + recursive_sum) / (1 - probability_n_j(n,0) - probability_n_j(n,n))
return(final_sum)
}
election(3)
probability_n_j = function(n, j) {
probability = choose(n,j)*(1/n)^(j)*(1-(1/n))^(n-j)
return(probability)
}
election = function(n) {
if (n <= 2) {
for (j in seq(from = (n-1), to = 2)) {
recursive_sum = sum(election(j)*probability_n_j(n,j))
}
}
final_sum = (1 + recursive_sum) / (1 - probability_n_j(n,0) - probability_n_j(n,n))
return(final_sum)
}
election(3)
election = function(n) {
if (n <= 2) {
for (j in seq(from = (n-1), to = 2)) {
recursive_sum = sum(election(j)*probability_n_j(n,j))
}
}
else {
recursive_sum = probability_n_j(n,j)
}
final_sum = (1 + recursive_sum) / (1 - probability_n_j(n,0) - probability_n_j(n,n))
return(final_sum)
}
election(3)
election = function(n) {
if (n <= 2) {
for (j in seq(from = (n-1), to = 2)) {
recursive_sum = sum(election(j)*probability_n_j(n,j))
}
}
else {
recursive_sum = 1*probability_n_j(n,1)
}
final_sum = (1 + recursive_sum) / (1 - probability_n_j(n,0) - probability_n_j(n,n))
return(final_sum)
}
election(3)
election = function(n) {
if (n <= 2) {
for (j in seq(from = (n-1), to = 2)) {
recursive_sum = sum(election(j)*probability_n_j(n,j))
}
}
else {
recursive_sum = 1*probability_n_j(n,1)
}
final_sum = (1 + recursive_sum) / (1 - probability_n_j(n,0) - probability_n_j(n,n))
return(final_sum)
}
election(3)
election(5)
election(10)
election(20)
election(30)
election(40)
election(100)
election(10000)
election(100000)
c(2:10 %o% 10^(3:7))
c(2:10 %o% 10^(1:7)
)
2e+01
1e+02
1e+08
electiondf = data.frame(n = c(2:10 %o% 10^(1:7)))
View(electiondf)
index = 1
for (n in electiondf$n) {
list[index] = election(n)
index = index + 1
}
average_L_n = NA
index = 1
average_L_n = NA
for (n in electiondf$n) {
average_L_n[index] = election(n)
index = index + 1
}
average_L_n
electiondf$average_L_sub_n = average_L_n
View(electiondf)
plot(electiondf$average_L_sub_n ~ electiondf$n)
library(ggplot2)
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point()
electiondf = data.frame(n = c(2:10 %o% 10^(2:7)))
index = 1
average_L_n = NA
for (n in electiondf$n) {
average_L_n[index] = election(n)
index = index + 1
}
electiondf$average_L_sub_n = average_L_n
plot(electiondf$average_L_sub_n ~ electiondf$n)
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point()
electiondf = data.frame(n = c(2:10 %o% 10^(3:7)))
index = 1
average_L_n = NA
for (n in electiondf$n) {
average_L_n[index] = election(n)
index = index + 1
}
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point()
electiondf$average_L_sub_n = average_L_n
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point()
electiondf = data.frame(n = c(2:10 %o% 10^(4:7)))
index = 1
average_L_n = NA
for (n in electiondf$n) {
average_L_n[index] = election(n)
index = index + 1
}
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point() +
scalex_log10()
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point() +
scale_x_log10()
electiondf = data.frame(n = c(2:10 %o% 10^(3:7)))
index = 1
average_L_n = NA
for (n in electiondf$n) {
average_L_n[index] = election(n)
index = index + 1
}
electiondf$average_L_sub_n = average_L_n
plot(electiondf$average_L_sub_n ~ electiondf$n)
library(ggplot2)
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point() +
scale_x_log10()
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point() +
scale_x_log10() +
ggtitle("Average number of iterations of L(n) at different size N", subtitle = "x-axis is log scale"
)
ggplot(data = electiondf, aes(y = average_L_n, x = n)) +
geom_point() +
scale_x_log10() +
ggtitle("Average number of iterations of L(n) at different size N", subtitle = "x-axis is log scale") +
ylab("Average L(n)"
)
### Neural net top 100 - blended CADD + pval
library(caret)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
### Neural net top 100 - blended CADD + pval
library(caret)
library(pROC)
setwd("//jetsam/scratch/cgm/Cejda/_thesis/cadd_pval")
caddpval_nnet_top100_score = readRDS("tuned_nnet_cadd_pval_top100_corr0.9_score.rds")
plot.nnet(caddpval_nnet_top100_score)
caddpval_nnet_top100_score = readRDS("tuned_nnet_cadd_pval_top10_corr0.9_score.rds")
caddpval_nnet_top10_score = readRDS("tuned_nnet_cadd_pval_top10_corr0.9_score.rds")
plot.nnet(caddpval_nnet_top10_score)
?plot.nnet
warnings()
install.packages("reshape)")
install.packages("reshape")
plot.nnet(caddpval_nnet_top10_score)
plot.nnet(caddpval_nnet_top10_score, cex = 0.7)
plot.nnet(caddpval_nnet_top10_score, cex = 0.8)
setwd("//jetsam/scratch/cgm/Cejda/_thesis/snplist1_logistic/top100")
rds = readRDS("tuned_nnet_top100_corr0.90.rds")
plot.nnet(rds, cex = 0.8) #Looks really nice!!
setwd("//jetsam/scratch/cgm/Cejda/_thesis/snplist1_logistic/top10")
rds = readRDS("tuned_nnet_top10_corr0.90.rds")
rds = readRDS("tuned_nnet_top10_corr0.95.rds")
plot.nnet(rds, cex = 0.8)
rds = readRDS("tuned_nnet_top100_corr0.90.rds")
plot.nnet(rds, cex = 0.8)
setwd("//jetsam/scratch/cgm/Cejda/_thesis/snplist1_logistic/top100")
rds = readRDS("tuned_nnet_top100_corr0.90.rds")
plot.nnet(rds, cex = 0.8)
plot.nnet(rds, cex = 0.8, x.lab = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q"))
plot.nnet(rds, cex = 0.8)
x_lab = c("SEX",
"6:32222064_G",
"6:32438471_C",
"6:32441279_A",
"6:32443258_A",
"6:32444056_T",
"6:32446112_C",
"6:32453294_A",
"6:32459378_A",
"6:32596950_G",
"6:32601190_C",
"6:32603170_T",
"6:32606528_G",
"6:32607881_G",
"6:32607958_G",
"6:32624899_A",
"6:32652509_C"))
x_lab = c("SEX",
"6:32222064_G",
"6:32438471_C",
"6:32441279_A",
"6:32443258_A",
"6:32444056_T",
"6:32446112_C",
"6:32453294_A",
"6:32459378_A",
"6:32596950_G",
"6:32601190_C",
"6:32603170_T",
"6:32606528_G",
"6:32607881_G",
"6:32607958_G",
"6:32624899_A",
"6:32652509_C")
plot.nnet(rds, cex = 0.8, x.lab = x_lab)
source_url('https://gist.github.com/fawda123/6206737/raw/2e1bc9cbc48d1a56d2a79dd1d33f414213f5f1b1/gar_fun.r')
rel.imp<-gar.fun('Y1',rds,bar.plot=F)$rel.imp
rel.imp<-gar.fun('Y1',rds,bar.plot=F)$rel.imp
source_url('https://gist.github.com/fawda123/6206737/raw/2e1bc9cbc48d1a56d2a79dd1d33f414213f5f1b1/gar_fun.r')
rel.imp<-gar.fun('Y1',rds,bar.plot=F)$rel.imp
source('https://gist.githubusercontent.com/fawda123/6860630/raw/b8bf4a6c88d6b392b1bfa6ef24759ae98f31877c/lek_fun.r')
lek.fun(rds)
install.packages("garson")
install.packages("NeuralNetTools")
install.packages("NeuralNetTools")
garson(rds)
library(NeuralNetTools)
garson(rds)
setwd("//jetsam/scratch/cgm/Cejda/_thesis/cadd_pval")
library(caret)
library(randomForest)
library(tidyverse)
cadd_top100_train = read.csv("cadd_pval_top_100_scores_train.csv", header = T)
cadd_100 = read.table("cadd_pval_top100.tsv", sep = "\t", header = T)
cadd_100$SNP_ALT = paste0("X", cadd_100$SNP, "_", cadd_100$ALT)
cadd_100$SNP_ALT = str_replace(cadd_100$SNP_ALT, ":", ".")
cor_matrix = cor(cadd_top100_train, method = "pearson")
find_corr = function(cor_matrix, cutoff) {
if(dim(cor_matrix)[1] != dim(cor_matrix)[2]) {
stop("Input was not a square matrix")
}
col_pairs = list()
for(i in seq(1:(length(row.names(cor_matrix))-1))) { #Don't go to last row b/c we don't compare diagonal.
for(j in c((i+1):length(colnames(cor_matrix)))) { # Start at row i + 1 b/c we don't compare diagonal.
if(cor_matrix[i,j] >= cutoff) {
temp_list = list(c(row.names(cor_matrix)[i], colnames(cor_matrix)[j])) #create a list of the pair of columns
col_pairs = append(col_pairs, temp_list) #append this list to the previous list.
}
}
}
return(col_pairs)
}
pairs = find_corr(cor_matrix, 0.9)
columns_to_remove = list()
for (i in c(1:length(pairs))) {
score1 = cadd_100[str_detect(pairs[[i]][1], cadd_100$SNP_ALT),6]
score2 = cadd_100[str_detect(pairs[[i]][2], cadd_100$SNP_ALT),6]
if (score1 <= score2) {
columns_to_remove = append(columns_to_remove,pairs[[i]][1])
}
else {
columns_to_remove = append(columns_to_remove, pairs[[i]][2])
}
}
columns_to_remove = columns_to_remove[!duplicated(columns_to_remove)]
columns_to_remove = unlist(columns_to_remove)
{
if (length(columns_to_remove) > 0) {
simplified_top100_train = cadd_top100_train[,-which(names(cadd_top100_train) %in% columns_to_remove)]
}
else {
simplified_top100_train = cadd_top100_train
}
}
